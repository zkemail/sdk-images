{% for regex in regexes %}
mod {{ regex.regex_circuit_name }};
{% endfor %}

use std::{collections::bounded_vec::BoundedVec, hash::{pedersen_hash, sha256_var}};
use zkemail::{dkim::RSAPubkey, headers::body_hash::get_body_hash, KEY_LIMBS_2048, Sequence, utils::pack_bytes, remove_soft_line_breaks::remove_soft_line_breaks};

fn main(
    header: BoundedVec<u8, {{ email_header_max_length }}>,
    pubkey: RSAPubkey<KEY_LIMBS_2048>,
    signature: [Field; KEY_LIMBS_2048],
    prover_address: [Field; 1],
    {% if not ignore_body_hash_check %}
    dkim_header_sequence: Sequence,
    body: BoundedVec<u8, {{ email_body_max_length }}>,
    body_hash_index: u32,
    precomputed_sha: [Field; 32],
    {% if remove_soft_line_breaks %}
    decoded_body: BoundedVec<u8, {{ email_body_max_length }}>,
    {% endif %}
    {% endif %}
    {% for external_input in external_inputs %}
    {{ external_input.name }}: [Field; {{ external_input.signal_length }}],
    {% endfor %}
    {% for regex in regexes %}
    {{ regex.name }}_match_start: u32,
    {{ regex.name }}_match_length: u32,
    {{ regex.name }}_current_states: [Field; {{ regex.max_length }}],
    {{ regex.name }}_next_states: [Field; {{ regex.max_length }}],
    {% if regex.num_public_parts > 0 %}
    {{ regex.name }}_capture_groups_ids: [Field; {{ regex.max_length }}],
    {{ regex.name }}_capture_groups_starts: [Field; {{ regex.max_length }}],
    {{ regex.name }}_capture_groups_indices: [Field; {{ regex.num_public_parts }}],
    {% endif %}
    {% endfor %}
) -> pub (Field, Field, Field, [Field; 1] {{ output_args }}) {
    // check the body and header lengths are within bounds
    assert(header.len() <= {{ email_header_max_length }});
    {% if not ignore_body_hash_check %}
    assert(body.len() <= {{ email_body_max_length }});
    {% endif %}
    
    // DKIM Verification
    let header_hash: [u8; 32] = pubkey.verify_dkim_signature(header, signature);
    let header_hash: [Field; 2] = pack_bytes::<32, 16>(header_hash);

    {% if not ignore_body_hash_check %}
    // Body Hash Verification
    let signed_body_hash = get_body_hash(header, dkim_header_sequence, body_hash_index);
    let computed_body_hash: [u8; 32] = sha256_var(body.storage(), body.len() as u64);
    assert(
        signed_body_hash == computed_body_hash,
        "SHA256 hash computed over body does not match body hash found in DKIM-signed header",
    );
    {% if remove_soft_line_breaks %}
    assert(
        remove_soft_line_breaks(body.storage(), decoded_body.storage()),
        "Decoded body does not properly remove soft line breaks",
    );
    {% endif %}
    {% endif %}

    let pubkey_hash = pubkey.hash();

    {% for regex in regexes %}
    {% if regex.num_public_parts > 0 %}
    let ({{ regex.capture_string }}) = {{ regex.regex_circuit_name }}::email_subject_regex::<{{ regex.max_length_of_location }}, {{ regex.max_length }}>({{ regex.location }}.storage(), {{ regex.name }}_match_start, {{ regex.name }}_match_length, {{ regex.name }}_current_states, {{ regex.name }}_next_states, {{ regex.name }}_capture_groups_ids, {{ regex.name }}_capture_groups_starts, {{ regex.name }}_capture_groups_indices);
    {% else %}
    email_subject_regex::<{{ regex.max_length_of_location }}, {{ regex.max_length }}>({{ regex.location }}.storage(), {{ regex.name }}_match_start, {{ regex.name }}_match_length, {{ regex.name }}_current_states, {{ regex.name }}_next_states);
    {% endif %}
    {% if regex.is_hashed %}
    {% for i in range(start=0, end=regex.num_public_parts) %}
    let {{ regex.name }}_capture_{{ i + 1 }}_packed = pack_bytes::<{{ regex.max_length }}, 31>({{ regex.name }}_capture_{{ i + 1 }}.storage());
    {% endfor %}
    let {{ regex.name }}_packed_hash = pedersen_hash([{{ regex.hash_inputs }}]);
    {% endif %}
    {% endfor %}

    (pubkey_hash, header_hash[0], header_hash[1], prover_address {{ output_signals }})
}
